window.DOC_DATA={"locales":[{"name":"zh","text":"中文","title":"Mota Validation","groups":[{"name":"guide","text":"使用指南","docs":[{"group":"guide","name":"get_started","title":"快速开始","index":1,"source":"# Mota Validation\n\n## 简述\n\nMota 可以使用任意的表单组件（form）来完成表单应用，但 Mota 不仅提供了状态管理，还提供了双向绑定的能力（可选），使用 `@binding` 时表单组件显得不那么重要，`@binding` 能给 React 带来「双向绑定」的能力，但与此同时 Mota 本身不并会处理表单验证，在开发应用时，使用 `@binding` 带来的便利的同时，又常常不得不自助处理表单验证的问题，而 `mota-validation` 就是一个针对 Mota 应用的专用验证模块，在使用 `@binding` 的便利的同时，也能便利的完成各类数据验证的需要。\n\n\n## 安装\n\nMota Validation 不是 mota 内建的一部分，而是以一个独立的模块，所以需要单独安装，参考如下代码：\n\n```bash\nnpm install mota-validation --save \n```\n\n## 使用\n\n### 在类组件中使用\nMota Validation 提供了一个 `@validation` 装饰器，通过 `@model` 装饰的组件都可以同时使用 `@validation` 启用验证。\n\n```tsx\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { model, binding } from \"mota\";\nimport { validation } from \"mota-validation\";\nimport ViewModel from \"./ViewModel\";\n\n@model(ViewModel)\n@binding\n@validation\nclass App extends React.Component {\n\n  model: ViewModel;\n  validation: Validation;\n\n  render() {\n    const { submit } = this.model;\n    const { Alert, Field, state, states } = this.validation;\n    return <div>\n      <label>姓名:</label>\n      <Field bind=\"params.name\" rules={[{ test: 'required' }]}>\n        <input data-bind=\"params.name\" />\n      </Field>\n      <Alert bind=\"params.name\" />\n      <button disabled={state() !== states.succeed} onClick={submit}>\n        立即提交\n      </button>\n    </div>;\n  }\n}\n\nReactDOM.render(<App />, root);\n\n```\n\n### 在函数组件中使用\n\n针对函数组件 Mota 提供了 `useModel` API，而 Mota Validation 提供了 `useValidation`。\n通过 Hook 风格的 API 即可在函数组件中使用 Mota 和 Mota Validation，参考如下代码：\n\n```tsx\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { useModel, binding, model } from 'mota';\nimport { useValidation } from \"mota-validation\";\nimport ViewModel from \"./ViewModel\";\n\nfunction App() {\n\n  render() {\n    const model = useModel(ViewModel);\n    const { submit } = ViewModel;\n    const { Alert, Field, state, states } = useValidation(model);\n    return binding(<div>\n      <label>姓名:</label>\n      <Field bind=\"params.name\" rules={[{ test: 'required' }]}>\n        <input data-bind=\"params.name\" />\n      </Field>\n      <Alert bind=\"params.name\" />\n      <button disabled={state() !== states.succeed} onClick={submit}>\n        立即提交\n      </button>\n    </div>, model);\n  }\n}\n\nReactDOM.render(<App />, root);\n\n```\n\n## 特别说明\n\n在 Mota Validation 中 UI 不是其重点，本质上 Mota Validation 是针对「模型数据的」校验。\n在 Mota Validation 中最重要的是一个名为 `Validation` 的类，可通过一个「模型实例」作为参数构造一个 `Validation` 实例，\n而所有的验证能力都是 `Validation` 提供的。\n\n通过上边的示例应该能注意到，在「类组件」中通过 `@validation` 装饰器为组件注入了 `Validation` 实例，\n而在「函数组件」中是通过 `useValidation` Hook 函数拿到的 `Validation` 实例。\n\n在 `Validation` 实例上，提供了一系列的 API，用于添加验证规则、执行数据校验证等功能。\n当 `model` 中的「添加了校验规则的数据」发生变化时，`Validation` 会自动对数据进行校验并把校验结果放到 `model` 中，\n默认为 `results`，而要校验的数据及校验结果其实本质上一样都是 `model` 中的数据。熟悉 Mota 的开发者应该了解，\n当组件依赖的 `model` 数据发生变化时，Mota 将触发组件的更新，那校验结果便呈现到视图中了。\n\n为了方便使用，在 `Validation` 的实例中还提供了「几个组件」，包括 `Field`、`State`、`Alert`，\n这几个组件一定程度可认为是 `Validation` 实例方法「便捷用法」，如语法糖一般。","filename":"markdowns/get_started.md","root":"/Users/Houfeng/my/dev/mota-validation","result":"<h1 id=\"mota-validation\">Mota Validation</h1>\n<h2 id=\"%E7%AE%80%E8%BF%B0\">简述</h2>\n<p>Mota 可以使用任意的表单组件（form）来完成表单应用，但 Mota 不仅提供了状态管理，还提供了双向绑定的能力（可选），使用 <code>@binding</code> 时表单组件显得不那么重要，<code>@binding</code> 能给 React 带来「双向绑定」的能力，但与此同时 Mota 本身不并会处理表单验证，在开发应用时，使用 <code>@binding</code> 带来的便利的同时，又常常不得不自助处理表单验证的问题，而 <code>mota-validation</code> 就是一个针对 Mota 应用的专用验证模块，在使用 <code>@binding</code> 的便利的同时，也能便利的完成各类数据验证的需要。</p>\n<h2 id=\"%E5%AE%89%E8%A3%85\">安装</h2>\n<p>Mota Validation 不是 mota 内建的一部分，而是以一个独立的模块，所以需要单独安装，参考如下代码：</p>\n<pre><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> mota-validation --save \n</code></pre>\n<h2 id=\"%E4%BD%BF%E7%94%A8\">使用</h2>\n<h3 id=\"%E5%9C%A8%E7%B1%BB%E7%BB%84%E4%BB%B6%E4%B8%AD%E4%BD%BF%E7%94%A8\">在类组件中使用</h3>\n<p>Mota Validation 提供了一个 <code>@validation</code> 装饰器，通过 <code>@model</code> 装饰的组件都可以同时使用 <code>@validation</code> 启用验证。</p>\n<pre><code class=\"language-tsx\">\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> model<span class=\"token punctuation\">,</span> binding <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"mota\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> validation <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"mota-validation\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ViewModel <span class=\"token keyword\">from</span> <span class=\"token string\">\"./ViewModel\"</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">model</span><span class=\"token punctuation\">(</span>ViewModel<span class=\"token punctuation\">)</span>\n@binding\n@validation\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n\n  model<span class=\"token punctuation\">:</span> ViewModel<span class=\"token punctuation\">;</span>\n  validation<span class=\"token punctuation\">:</span> Validation<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> submit <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Alert<span class=\"token punctuation\">,</span> Field<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> states <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>validation<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">姓名:</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Field</span></span> <span class=\"token attr-name\">bind</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>params.name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rules</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> test<span class=\"token punctuation\">:</span> <span class=\"token string\">'required'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">data-bind</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>params.name<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Field</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Alert</span></span> <span class=\"token attr-name\">bind</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>params.name<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">disabled</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> states<span class=\"token punctuation\">.</span>succeed<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>submit<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        立即提交\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<h3 id=\"%E5%9C%A8%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%E4%B8%AD%E4%BD%BF%E7%94%A8\">在函数组件中使用</h3>\n<p>针对函数组件 Mota 提供了 <code>useModel</code> API，而 Mota Validation 提供了 <code>useValidation</code>。\n通过 Hook 风格的 API 即可在函数组件中使用 Mota 和 Mota Validation，参考如下代码：</p>\n<pre><code class=\"language-tsx\">\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useModel<span class=\"token punctuation\">,</span> binding<span class=\"token punctuation\">,</span> model <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'mota'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useValidation <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"mota-validation\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ViewModel <span class=\"token keyword\">from</span> <span class=\"token string\">\"./ViewModel\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> model <span class=\"token operator\">=</span> <span class=\"token function\">useModel</span><span class=\"token punctuation\">(</span>ViewModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> submit <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> ViewModel<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Alert<span class=\"token punctuation\">,</span> Field<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> states <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useValidation</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">binding</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">姓名:</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Field</span></span> <span class=\"token attr-name\">bind</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>params.name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rules</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> test<span class=\"token punctuation\">:</span> <span class=\"token string\">'required'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">data-bind</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>params.name<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Field</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Alert</span></span> <span class=\"token attr-name\">bind</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>params.name<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">disabled</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> states<span class=\"token punctuation\">.</span>succeed<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>submit<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        立即提交\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<h2 id=\"%E7%89%B9%E5%88%AB%E8%AF%B4%E6%98%8E\">特别说明</h2>\n<p>在 Mota Validation 中 UI 不是其重点，本质上 Mota Validation 是针对「模型数据的」校验。\n在 Mota Validation 中最重要的是一个名为 <code>Validation</code> 的类，可通过一个「模型实例」作为参数构造一个 <code>Validation</code> 实例，\n而所有的验证能力都是 <code>Validation</code> 提供的。</p>\n<p>通过上边的示例应该能注意到，在「类组件」中通过 <code>@validation</code> 装饰器为组件注入了 <code>Validation</code> 实例，\n而在「函数组件」中是通过 <code>useValidation</code> Hook 函数拿到的 <code>Validation</code> 实例。</p>\n<p>在 <code>Validation</code> 实例上，提供了一系列的 API，用于添加验证规则、执行数据校验证等功能。\n当 <code>model</code> 中的「添加了校验规则的数据」发生变化时，<code>Validation</code> 会自动对数据进行校验并把校验结果放到 <code>model</code> 中，\n默认为 <code>results</code>，而要校验的数据及校验结果其实本质上一样都是 <code>model</code> 中的数据。熟悉 Mota 的开发者应该了解，\n当组件依赖的 <code>model</code> 数据发生变化时，Mota 将触发组件的更新，那校验结果便呈现到视图中了。</p>\n<p>为了方便使用，在 <code>Validation</code> 的实例中还提供了「几个组件」，包括 <code>Field</code>、<code>State</code>、<code>Alert</code>，\n这几个组件一定程度可认为是 <code>Validation</code> 实例方法「便捷用法」，如语法糖一般。</p>\n"},{"group":"guide","name":"api","title":"常用 API","index":2,"source":"# 常用 API\n\n## Validation 类\n\nValidation 类是 Mota Validation 的核心，推荐开发人员直接用的 API 几乎都是基于 Validation 实例提供的各种能力，\n可参考如下代码创建 `Validation` 类实例：\n\n```ts\n// Validation 构造函数签名如下\n// Validation(model: any, options: IValidationOptions);\n\n// 省略 options\nconst validation1 = new Validation({});\n\n// 创建实例，并通过 initial 声明启用首次初始校验\nconst validation2 = new Validation({}, { initial: true });\n```\n\n通过必须参数 `model` 和可选参数 `IValidationOptions` 可构造一个 Validation 实例。\n\n\n## 在项目中使用\n\n在几乎所有项目中，都不需要手动去创建 `Validation` 实例，\n而是分别通过 `@validation` 装饰器和 `useValidation` Hook API 来自动完成。\n\n### @validation\n\n省略 `IValidationOptions` 时，参考如下代码：\n\n```js\n@model({})\n@validation\nclass MyComponent extends React.Component{\n  ...\n}\n```\n\n需要指定 `IValidationOptions` 时，参考如下代码：\n\n```js\n@model({})\n@validation({ initial: true })\nclass MyComponent extends React.Component{\n  ...\n}\n```\n\n### useValidation\n\n省略 `IValidationOptions` 时，参考如下代码：\n\n```js\nfunction MyComponent{\n  const model = useModel({});\n  const validation = useValidation(model)\n}\n```\n\n需要指定 `IValidationOptions` 时，参考如下代码：\n\n```js\nfunction MyComponent{\n  const model = useModel({});\n  const validation = useValidation(model, { initial: true })\n}\n```\n\n\n## IValidationOptions 选项\n\n```ts\nexport interface IValidationOptions {\n  /**\n   * 是否自动进行一次初始校验，默认为 false\n   */\n  initial?: boolean;\n\n  /**\n   * 模型数发生变化时是自动定校验，默认为 true\n   */\n  auto?: boolean;\n\n  /**\n   * 去抖时间阈值\n   */\n  debounce?: number;\n\n  /**\n   * 验证结果在 model 中的字段名称，默认为 results\n   */\n  stateKey?: string;\n}\n```\n\n\n## 常用 API\n\n在 `Validation` 的实例上，有一组 API 用于完成各类验证需求，这里介绍一下常用的重要 API，\n这些 API 如无特殊说明，可在组件生命周期的各阶段使用，包括 `readner`。\n\n### setRule 方法\n\n用于显示设定验证规则，一般不用直接调用，而且「辅助组件」自动设定\n\n```ts\n/**\n  * 设定验证规则\n  * @param {string} bind 要验证的数据\n  * @param {IRule | Array<IRule>} rules 规则\n  * @param {string} alias 别名\n  */\nsetRule: (bind: string, rules: IRule | IRule[], alias?: string) => void;\n```\n\n**IRule 定义 说明**\n\n设定验证规则时，每个 `rule` 都须符合 `IRule` 的定义，\n至少要包含 `test` 函数，每个 `test` 函数都就返回 `boolean` 或 `Promise<boolean>`,\n可选的 `message` 用指定在验证失败时显示的消息。\n\n```ts\nexport declare type ITestFunction = (value: any, model?: any) => boolean | Promise<boolean>;\nexport interface IRule {\n    message?: string;\n    test: ITestFunction | RegExp | string;\n}\n```\n\n### tests 枚举\n\nMota Validation 内建了一组常用的验证函数\n\n```ts\n/**\n * 任意值\n */\nany,\n\n/**\n * 非空值（包括不能是空字符串）\n */\nrequired,\n\n/**\n * 非空白字符（可视字符）\n */\nnonblank\n\n/**\n * 数值\n */\nnumber,\n\n/**\n * 非数值\n */\nnan,\n\n/**\n * 数值区间\n */\nrange: (min: number, max: number),\n\n/**\n * 字符串长度\n */\nlen: (min: number, max: number, trim?: boolean),\n\n/**\n * 邮箱\n */\nemail,\n\n/**\n * 中文\n */\nzh,\n\n/**\n * 英文\n */\nen,\n\n/**\n * IP v4\n */\nipv4,\n\n/**\n * URL\n */\nurl,\n```\n\n### state 方法\n\n用于获取整体或指数据项的验证结果，通常用于判断提交按钮是否禁用等场景。\n\n```ts\n/**\n * 查询验证结果的 state 值\n * @param bind 绑定表达式，bind 省略时查询整体 state\n */\nstate: (bind?: string) => states;\n```\n\n### states 枚举\n\n在 Mota Validation 针对验证状态做了细致的划分，`state` 方法的返回结果便是 `states` 的可选值之一\n\n```ts\n/**\n * 验证状态\n */\nexport declare enum states {\n    /**\n     * 未知\n     */\n    unknown = -3,\n    /**\n     * 未验证\n     */\n    untested = -2,\n    /**\n     * 验证中\n     */\n    testing = -1,\n    /**\n     * 失败\n     */\n    failed = 0,\n    /**\n     * 成功\n     */\n    succeed = 1,\n    /**\n     * 成功\n     */\n    success = 1\n}\n```\n\n### test 方法\n\n用于主动的显示执行数据校验\n\n```ts\n/**\n * 触发验证，传入 bind 时验证指定数据项，省略参数时验证整个表单\n * @param {string} bind 要验证的数据\n * @returns {Promise<states>} 验证结果\n */\ntest: (bind?: string) => Promise<states>;\n```\n\n### reset 方法\n\n```ts\n/**\n  * 重置验证状态\n  */\nreset: () => void;\n```\n\n### avoid 方法\n\n用于临时避开验证更新模型数据，比如，在编辑表单中从服务端拉取数据赋值到 `model` 或重置表单数据时而不期望触发验证。\n\n```ts\n/**\n  * 避开验证，希望暂时避开验证进行数据更改，可使用此方法\n  * @param {Function} handler 处理函数\n  */\navoid: (handler: Function) => Promise<unknown>;\n```\n\n参考如下示例代码：\n\n```ts\nthis.validation.avoid(()=>{\n  //在这里改变模型，不触发验证\n  this.model.name = '';\n});\n```\n\n### reulsts 属性\n\n在 `results` 包含了整体的验证结果，以级每个数据项的验证结果，还有验证失败对应的 `message` .\n\n```ts\n/**\n * 验证结果\n */\nresults: IResults;\n```","filename":"markdowns/api.md","root":"/Users/Houfeng/my/dev/mota-validation","result":"<h1 id=\"%E5%B8%B8%E7%94%A8-api\">常用 API</h1>\n<h2 id=\"validation-%E7%B1%BB\">Validation 类</h2>\n<p>Validation 类是 Mota Validation 的核心，推荐开发人员直接用的 API 几乎都是基于 Validation 实例提供的各种能力，\n可参考如下代码创建 <code>Validation</code> 类实例：</p>\n<pre><code class=\"language-ts\"><span class=\"token comment\">// Validation 构造函数签名如下</span>\n<span class=\"token comment\">// Validation(model: any, options: IValidationOptions);</span>\n\n<span class=\"token comment\">// 省略 options</span>\n<span class=\"token keyword\">const</span> validation1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Validation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 创建实例，并通过 initial 声明启用首次初始校验</span>\n<span class=\"token keyword\">const</span> validation2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Validation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> initial<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>通过必须参数 <code>model</code> 和可选参数 <code>IValidationOptions</code> 可构造一个 Validation 实例。</p>\n<h2 id=\"%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8\">在项目中使用</h2>\n<p>在几乎所有项目中，都不需要手动去创建 <code>Validation</code> 实例，\n而是分别通过 <code>@validation</code> 装饰器和 <code>useValidation</code> Hook API 来自动完成。</p>\n<h3 id=\"%40validation\">@validation</h3>\n<p>省略 <code>IValidationOptions</code> 时，参考如下代码：</p>\n<pre><code class=\"language-js\">@<span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n@validation\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>需要指定 <code>IValidationOptions</code> 时，参考如下代码：</p>\n<pre><code class=\"language-js\">@<span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n@<span class=\"token function\">validation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> initial<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"usevalidation\">useValidation</h3>\n<p>省略 <code>IValidationOptions</code> 时，参考如下代码：</p>\n<pre><code class=\"language-js\"><span class=\"token keyword\">function</span> MyComponent<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> model <span class=\"token operator\">=</span> <span class=\"token function\">useModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> validation <span class=\"token operator\">=</span> <span class=\"token function\">useValidation</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>需要指定 <code>IValidationOptions</code> 时，参考如下代码：</p>\n<pre><code class=\"language-js\"><span class=\"token keyword\">function</span> MyComponent<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> model <span class=\"token operator\">=</span> <span class=\"token function\">useModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> validation <span class=\"token operator\">=</span> <span class=\"token function\">useValidation</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> initial<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"ivalidationoptions-%E9%80%89%E9%A1%B9\">IValidationOptions 选项</h2>\n<pre><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IValidationOptions</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n   * 是否自动进行一次初始校验，默认为 false\n   */</span>\n  initial<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/**\n   * 模型数发生变化时是自动定校验，默认为 true\n   */</span>\n  auto<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/**\n   * 去抖时间阈值\n   */</span>\n  debounce<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/**\n   * 验证结果在 model 中的字段名称，默认为 results\n   */</span>\n  stateKey<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"%E5%B8%B8%E7%94%A8-api-2\">常用 API</h2>\n<p>在 <code>Validation</code> 的实例上，有一组 API 用于完成各类验证需求，这里介绍一下常用的重要 API，\n这些 API 如无特殊说明，可在组件生命周期的各阶段使用，包括 <code>readner</code>。</p>\n<h3 id=\"setrule-%E6%96%B9%E6%B3%95\">setRule 方法</h3>\n<p>用于显示设定验证规则，一般不用直接调用，而且「辅助组件」自动设定</p>\n<pre><code class=\"language-ts\"><span class=\"token comment\">/**\n  * 设定验证规则\n  * @param {string} bind 要验证的数据\n  * @param {IRule | Array&lt;IRule>} rules 规则\n  * @param {string} alias 别名\n  */</span>\n<span class=\"token function-variable function\">setRule</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">bind<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> rules<span class=\"token punctuation\">:</span> IRule <span class=\"token operator\">|</span> IRule<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> alias<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>IRule 定义 说明</strong></p>\n<p>设定验证规则时，每个 <code>rule</code> 都须符合 <code>IRule</code> 的定义，\n至少要包含 <code>test</code> 函数，每个 <code>test</code> 函数都就返回 <code>boolean</code> 或 <code>Promise&lt;boolean&gt;</code>,\n可选的 <code>message</code> 用指定在验证失败时显示的消息。</p>\n<pre><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">declare</span> <span class=\"token keyword\">type</span> <span class=\"token function-variable function\">ITestFunction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> model<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">boolean</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IRule</span> <span class=\"token punctuation\">{</span>\n    message<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    test<span class=\"token punctuation\">:</span> ITestFunction <span class=\"token operator\">|</span> RegExp <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"tests-%E6%9E%9A%E4%B8%BE\">tests 枚举</h3>\n<p>Mota Validation 内建了一组常用的验证函数</p>\n<pre><code class=\"language-ts\"><span class=\"token comment\">/**\n * 任意值\n */</span>\n<span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token comment\">/**\n * 非空值（包括不能是空字符串）\n */</span>\nrequired<span class=\"token punctuation\">,</span>\n\n<span class=\"token comment\">/**\n * 非空白字符（可视字符）\n */</span>\nnonblank\n\n<span class=\"token comment\">/**\n * 数值\n */</span>\n<span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token comment\">/**\n * 非数值\n */</span>\nnan<span class=\"token punctuation\">,</span>\n\n<span class=\"token comment\">/**\n * 数值区间\n */</span>\nrange<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token comment\">/**\n * 字符串长度\n */</span>\nlen<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> trim<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token comment\">/**\n * 邮箱\n */</span>\nemail<span class=\"token punctuation\">,</span>\n\n<span class=\"token comment\">/**\n * 中文\n */</span>\nzh<span class=\"token punctuation\">,</span>\n\n<span class=\"token comment\">/**\n * 英文\n */</span>\nen<span class=\"token punctuation\">,</span>\n\n<span class=\"token comment\">/**\n * IP v4\n */</span>\nipv4<span class=\"token punctuation\">,</span>\n\n<span class=\"token comment\">/**\n * URL\n */</span>\nurl<span class=\"token punctuation\">,</span>\n</code></pre>\n<h3 id=\"state-%E6%96%B9%E6%B3%95\">state 方法</h3>\n<p>用于获取整体或指数据项的验证结果，通常用于判断提交按钮是否禁用等场景。</p>\n<pre><code class=\"language-ts\"><span class=\"token comment\">/**\n * 查询验证结果的 state 值\n * @param bind 绑定表达式，bind 省略时查询整体 state\n */</span>\n<span class=\"token function-variable function\">state</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">bind<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> states<span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"states-%E6%9E%9A%E4%B8%BE\">states 枚举</h3>\n<p>在 Mota Validation 针对验证状态做了细致的划分，<code>state</code> 方法的返回结果便是 <code>states</code> 的可选值之一</p>\n<pre><code class=\"language-ts\"><span class=\"token comment\">/**\n * 验证状态\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">declare</span> <span class=\"token keyword\">enum</span> states <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * 未知\n     */</span>\n    <span class=\"token builtin\">unknown</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">/**\n     * 未验证\n     */</span>\n    untested <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">/**\n     * 验证中\n     */</span>\n    testing <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">/**\n     * 失败\n     */</span>\n    failed <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">/**\n     * 成功\n     */</span>\n    succeed <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">/**\n     * 成功\n     */</span>\n    success <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"test-%E6%96%B9%E6%B3%95\">test 方法</h3>\n<p>用于主动的显示执行数据校验</p>\n<pre><code class=\"language-ts\"><span class=\"token comment\">/**\n * 触发验证，传入 bind 时验证指定数据项，省略参数时验证整个表单\n * @param {string} bind 要验证的数据\n * @returns {Promise&lt;states>} 验证结果\n */</span>\n<span class=\"token function-variable function\">test</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">bind<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>states<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"reset-%E6%96%B9%E6%B3%95\">reset 方法</h3>\n<pre><code class=\"language-ts\"><span class=\"token comment\">/**\n  * 重置验证状态\n  */</span>\n<span class=\"token function-variable function\">reset</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"avoid-%E6%96%B9%E6%B3%95\">avoid 方法</h3>\n<p>用于临时避开验证更新模型数据，比如，在编辑表单中从服务端拉取数据赋值到 <code>model</code> 或重置表单数据时而不期望触发验证。</p>\n<pre><code class=\"language-ts\"><span class=\"token comment\">/**\n  * 避开验证，希望暂时避开验证进行数据更改，可使用此方法\n  * @param {Function} handler 处理函数\n  */</span>\n<span class=\"token function-variable function\">avoid</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">handler<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Function</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">unknown</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>参考如下示例代码：</p>\n<pre><code class=\"language-ts\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>validation<span class=\"token punctuation\">.</span><span class=\"token function\">avoid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//在这里改变模型，不触发验证</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"reulsts-%E5%B1%9E%E6%80%A7\">reulsts 属性</h3>\n<p>在 <code>results</code> 包含了整体的验证结果，以级每个数据项的验证结果，还有验证失败对应的 <code>message</code> .</p>\n<pre><code class=\"language-ts\"><span class=\"token comment\">/**\n * 验证结果\n */</span>\nresults<span class=\"token punctuation\">:</span> IResults<span class=\"token punctuation\">;</span>\n</code></pre>\n"},{"group":"guide","name":"components","title":"辅助组件","index":3,"source":"# 辅助组件\n\n## 简述\n\n虽然 Validation API 可直接使用，但无论是在「类组件」或「函数组件」中，通常需要使用内建的几个辅助组件，\n来更方便的使用 Mota Validation，在「快速开始」的示例中应该看到过部分使用，这是 Mota Validation 推荐的用法。\n\n目前共有 3 个内建的「辅助验证组件」，包括 `Field`、`Alert`、`State`.\n\n## Field 组件\n\n//todo\n\n\n## Alert 组件\n\n//todo\n\n\n## State 组件\n\n//todo\n\n## 注意事项","filename":"markdowns/components.md","root":"/Users/Houfeng/my/dev/mota-validation","result":"<h1 id=\"%E8%BE%85%E5%8A%A9%E7%BB%84%E4%BB%B6\">辅助组件</h1>\n<h2 id=\"%E7%AE%80%E8%BF%B0\">简述</h2>\n<p>虽然 Validation API 可直接使用，但无论是在「类组件」或「函数组件」中，通常需要使用内建的几个辅助组件，\n来更方便的使用 Mota Validation，在「快速开始」的示例中应该看到过部分使用，这是 Mota Validation 推荐的用法。</p>\n<p>目前共有 3 个内建的「辅助验证组件」，包括 <code>Field</code>、<code>Alert</code>、<code>State</code>.</p>\n<h2 id=\"field-%E7%BB%84%E4%BB%B6\">Field 组件</h2>\n<p>//todo</p>\n<h2 id=\"alert-%E7%BB%84%E4%BB%B6\">Alert 组件</h2>\n<p>//todo</p>\n<h2 id=\"state-%E7%BB%84%E4%BB%B6\">State 组件</h2>\n<p>//todo</p>\n<h2 id=\"%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\">注意事项</h2>\n"}]}],"links":[{"text":"状态管理 (Mota)","url":"//houfeng.net/mota/"},{"text":"数据验证 (Validation)","url":"//houfeng.net/mota-validation/"},{"text":"表单组件 (Form)","url":"//houfeng.net/mota-form/"},{"text":"源码 (GitHub)","url":"//github.com/Houfeng/mota-validation"}]}],"plugins":[{"name":"doczilla-place","options":{}},{"name":"doczilla-include","options":{}},{"name":"doczilla-container","options":{}},{"name":"doczilla-highlight","options":{}},{"name":"doczilla-details","options":{}},{"name":"doczilla-card","options":{}},{"name":"doczilla-anchor","options":{}}],"mode":"static","baseUri":"","extname":".html"};