import { Alert, IAlertPorps } from "./Alert";
import { EventEmitter } from "./EventEmitter";
import { IFieldPorps } from "./Field";
import { IResults } from "./IResults";
import { IRule } from "./IRule";
import { IStateProps } from "./State";
import { ITestItem } from "./ITestItem";
import { ITestItemMap } from "./ItestItemMap";
import { IValidationOptions } from "./IValidationOptions";
import { IValidationPorps } from "./IValidationPorps";
import { states } from "./states";
export { IValidationPorps, Alert };
export declare class Validation extends EventEmitter {
    private __options;
    private __model;
    private __items;
    private __watchers;
    private __aliases;
    private __time;
    private __watchPaused;
    private __alert;
    private __field;
    private __state;
    constructor(model: any, options: IValidationOptions);
    private initResults;
    results: IResults;
    state: (bind?: string) => states.unknown | states;
    readonly options: IValidationOptions;
    readonly Alert: (props: IAlertPorps) => any;
    readonly Field: (props: IFieldPorps) => any;
    readonly State: (props: IStateProps) => any;
    readonly tests: import("./ITestMap").ITestMap;
    readonly states: typeof states;
    private readonly aliases;
    readonly model: any;
    readonly items: ITestItemMap;
    readonly testCount: number;
    readonly time: number;
    getItem(bind: string): ITestItem;
    private watchTimers;
    private clearWatchTimer;
    private watch;
    private unWatch;
    setRule: (bind: string, rules: IRule | IRule[], alias?: string) => void;
    removeRule(bind: string): void;
    clearRules(): void;
    setState: (bind: string, state: states, message?: string) => void;
    private getTestFuncForString;
    private getTestFunc;
    private createTestPending;
    private testOne;
    private testAll;
    test: (bind?: string) => Promise<states>;
    private getState;
    pauseWatch: () => void;
    resumeWatch: () => void;
    sartWatch: () => void;
    stopWatch: () => void;
    reset: () => void;
    avoid: (handler: Function) => Promise<unknown>;
    distory: () => void;
}
