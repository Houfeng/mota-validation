import { ReactElement } from 'react';
import { IRule } from "./IRule";
import { ITestItemMap } from './ItestItemMap';
import { IValidationPorps } from './IValidationPorps';
import { Alert, IAlertPorps } from './Alert';
import { IFieldPorps } from './Field';
import { IStateProps } from './State';
import { states } from './states';
export { IValidationPorps, Alert };
declare const EventEmitter: any;
export declare class Validation extends EventEmitter {
    private __component;
    private __model;
    private __items;
    private __watchers;
    private __aliases;
    private __testCount;
    private __alert;
    private __field;
    private __state;
    constructor(component: any);
    private updateComponent;
    readonly Alert: (props: IAlertPorps) => any;
    readonly Field: (props: IFieldPorps) => any;
    readonly State: (props: IStateProps) => any;
    readonly tests: import("../../../../../../Users/Houfeng/my/dev/mota-validation/src/ITestMap").ITestMap;
    readonly states: typeof states;
    private readonly aliases;
    private readonly model;
    private readonly component;
    readonly items: ITestItemMap;
    readonly testCount: number;
    item(bind: string): import("../../../../../../Users/Houfeng/my/dev/mota-validation/src/ITestItem").ITestItem;
    setRule: (bind: string, rules: IRule | IRule[], alias?: string) => void;
    setState: (bind: string, state: states, message?: string | ReactElement<any>, update?: boolean) => void;
    private testOne;
    private testAll;
    test: (bind?: string) => Promise<states>;
    state: (bind?: string) => states;
    startWatch: () => void;
    stopWatch: () => void;
    distory: () => void;
}
